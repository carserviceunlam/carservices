"""
Django settings for CarService project.

Generated by 'django-admin startproject' using Django 3.1.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""
import os
from pathlib import Path

import MySQLdb

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve(strict=True).parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "mst*yqt9-od=t-b2ctm07shvl0q$@s=56m1r@d*zjpgf#o3fl@"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["0.0.0.0", "35.175.149.249"]

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "crispy_forms",
    # apps related to this project
    "CarService.apps.admin_website",
    "CarService.apps.login",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "CarService.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "CarService.wsgi.application"


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

# this variabels are related to docker file in dev environment
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.mysql",
        "NAME": "carservicedb",
        "USER": "admin",
        "PASSWORD": "Service2022",
        "HOST": "carservicedb.cvkrx6mlzyev.us-east-1.rds.amazonaws.com",
        "PORT": "3306",
    },
}

"""DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.mysql",
        "NAME": "admin_carservice",
        "USER": "root",
        "PASSWORD": "adminadmin",
        "HOST": "127.0.0.1",
        "PORT": "3306",
    },
}"""

DATABASE_ROUTERS = ["CarService.db_routers.Admin_websiteRouter"]

try:
    conn = MySQLdb.connect(
        host="carservicedb.cvkrx6mlzyev.us-east-1.rds.amazonaws.com",
        user="admin",
        passwd="Service2022",
        db="carservicedb",
    )
    cursor = conn.cursor()
    cursor.execute("SELECT username FROM carservicedb.auth_user")
    # row = cursor.fetchone()
    # print(row[0])

    for row in cursor:
        # print(row[0])
        _DATABASES = {
            row[0]: {
                "ENGINE": "django.db.backends.mysql",
                "NAME": f"{row[0]}",
                "USER": "admin",
                "PASSWORD": "Service2022",
                "HOST": "carservicedb.cvkrx6mlzyev.us-east-1.rds.amazonaws.com",
                "PORT": "3306",
            },
        }
        for k, v in _DATABASES.items():
            if k in DATABASES:
                DATABASES[k].update(v)
            else:
                DATABASES[k] = v
            # print(DATABASES)

    cursor.close()
    conn.close()
except Exception:
    pass

"""try:
    conn = MySQLdb.connect(
        host="127.0.0.1",
        user="root",
        passwd="adminadmin",
        db="admin_carservice",
    )
    cursor = conn.cursor()
    cursor.execute("SELECT username FROM admin_carservice.auth_user")
    # row = cursor.fetchone()
    # print(row[0])

    for row in cursor:
        # print(row[0])
        _DATABASES = {
            row[0]: {
                "ENGINE": "django.db.backends.mysql",
                "NAME": f"{row[0]}",
                "USER": "root",
                "PASSWORD": "adminadmin",
                "HOST": "127.0.0.1",
                "PORT": "3306",
            },
        }
        for k, v in _DATABASES.items():
            if k in DATABASES:
                DATABASES[k].update(v)
            else:
                DATABASES[k] = v
            # print(DATABASES)

    cursor.close()
    conn.close()
except Exception:
    pass"""


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = "/static/"
STATICFILES_DIRS = (os.path.join(BASE_DIR, "static"),)
CRISPY_TEMPLATE_PACK = "bootstrap4"

# Login Settings
LOGIN_URL = "/session/login/"
LOGIN_REDIRECT_URL = "/"
LOGOUT_REDIRECT_URL = LOGIN_URL
